# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/13_metrics.ipynb (unless otherwise specified).

__all__ = ['AvgEpisodeRewardMetric']

# Cell
import torch.nn.utils as nn_utils
from fastai.torch_basics import *
from fastai.data.all import *
from fastai.basics import *
from fastai.metrics import *
from dataclasses import field,asdict
from typing import List,Any,Dict,Callable
from collections import deque
import gym
from torch.optim import *

from .data import *
from .async_data import *
from .basic_agents import *
from .learner import *
from fastai.callback.progress import *

if IN_NOTEBOOK:
    from IPython import display
    import PIL.Image

# Cell
class AvgEpisodeRewardMetric(Metric):
    def reset(self):
        self.r=0

    def accumulate(self,learn):
        yb=learn.yb[0]
        yb=[Experience(**{k:yb[k][i] for k in yb}) for i in range(learn.dls.bs)]
        rewards=[y.episode_r for y in yb if y.d]
        if len(rewards)!=0:self.r=sum(rewards)/len(rewards)

    @property
    def value(self): return self.r
    @property
    def name(self):return 'avg_episode_r'